{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>E</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>6.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     A     B    C     D    E\n",
       "0  0.0   0.0  1.0   7.0  4.0\n",
       "1  0.0   6.0  0.0   7.0  0.0\n",
       "2  0.0   0.0  0.0   9.0  0.0\n",
       "3  3.0   0.0  0.0   6.0  0.0\n",
       "4  0.0   7.0  0.0   8.0  4.0\n",
       "5  8.0   0.0  7.0   0.0  0.0\n",
       "6  0.0   3.0  0.0   0.0  0.0\n",
       "7  4.0   0.0  0.0   0.0  0.0\n",
       "8  6.0  10.0  0.0  10.0  0.0\n",
       "9  0.0   0.0  0.0   0.0  6.0"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#populating random user ratings - 0 represents item not rated \n",
    "#Limitation - at least one item must be rated to be a candidate for recommendation for collaborative filtering\n",
    "import math\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "items = 5\n",
    "users = 10\n",
    "a = np.random.rand(users,items)\n",
    "df = pd.DataFrame(a)\n",
    "for i in range(users):\n",
    "    for j in range(items):\n",
    "        df.set_value(i,j,20*df.get_value(i,j))\n",
    "        df.set_value(i,j,int(math.ceil(df.get_value(i,j))))\n",
    "        if df.get_value(i,j)>10:\n",
    "            df.set_value(i,j,0)\n",
    "df.rename(columns = {0: \"A\", 1: \"B\",2:\"C\",3:\"D\",4:\"E\"})\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              0           1           2             3           4  \\\n",
      "0  2.220446e-14   34.579381   13.835956  2.293254e+01   21.969269   \n",
      "1  3.457938e+01    0.000000   24.074340  3.209002e+01    6.411657   \n",
      "2  1.383596e+01   24.074340    0.000000  1.055728e+01   29.563927   \n",
      "3  2.293254e+01   32.090025   10.557281  1.110223e-14   37.000062   \n",
      "4  2.196927e+01    6.411657   29.563927  3.700006e+01    0.000000   \n",
      "5  9.189437e+01  100.000000  100.000000  6.634375e+01  100.000000   \n",
      "6  1.000000e+02   34.920863  100.000000  1.000000e+02   38.368437   \n",
      "7  1.000000e+02  100.000000  100.000000  5.527864e+01  100.000000   \n",
      "8  4.391198e+01    8.213695   34.905545  2.431107e+01   14.031292   \n",
      "9  5.076340e+01  100.000000  100.000000  1.000000e+02   64.781964   \n",
      "\n",
      "              5           6           7             8           9  \n",
      "0  9.189437e+01  100.000000  100.000000  4.391198e+01   50.763404  \n",
      "1  1.000000e+02   34.920863  100.000000  8.213695e+00  100.000000  \n",
      "2  1.000000e+02  100.000000  100.000000  3.490554e+01  100.000000  \n",
      "3  6.634375e+01  100.000000   55.278640  2.431107e+01  100.000000  \n",
      "4  1.000000e+02   38.368437  100.000000  1.403129e+01   64.781964  \n",
      "5  1.110223e-14  100.000000   24.742331  7.060686e+01  100.000000  \n",
      "6  1.000000e+02    0.000000  100.000000  3.490554e+01  100.000000  \n",
      "7  2.474233e+01  100.000000    0.000000  6.094333e+01  100.000000  \n",
      "8  7.060686e+01   34.905545   60.943327 -2.220446e-14  100.000000  \n",
      "9  1.000000e+02  100.000000  100.000000  1.000000e+02    0.000000  \n"
     ]
    }
   ],
   "source": [
    "#edge weights in dimension 0\n",
    "b = [[0 for x in range(users)] for y in range(users)]\n",
    "from scipy import spatial \n",
    "for i in range(users):\n",
    "    for j in range(users):\n",
    "        b[i][j] = spatial.distance.cosine(df.loc[[i]],df.loc[[j]])*100\n",
    "df1 = pd.DataFrame(b)\n",
    "print (df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              0           1             2          3           4\n",
      "0  1.110223e-14   61.470322  2.916498e+01  64.163962  100.000000\n",
      "1  6.147032e+01    0.000000  1.000000e+02  26.979514   75.621740\n",
      "2  2.916498e+01  100.000000  1.110223e-14  94.914971   93.140057\n",
      "3  6.416396e+01   26.979514  9.491497e+01   0.000000   62.625345\n",
      "4  1.000000e+02   75.621740  9.314006e+01  62.625345    0.000000\n"
     ]
    }
   ],
   "source": [
    "#edge weights in dimension 1 \n",
    "#uncomment following snipet if amazon's item-to-item algorithm applied\n",
    "# for i in range(users):\n",
    "#     for j in range(items):\n",
    "#         if(df.get_value(i,j)>0):#assuming every rated item is bought\n",
    "#             df.set_value(i,j,1)\n",
    "# print (df)\n",
    "c = [[0 for x in range(items)] for y in range(items)]\n",
    "from scipy import spatial \n",
    "for i in range(items):\n",
    "    for j in range(items):\n",
    "        c[i][j] = spatial.distance.cosine(df[i],df[j])*100\n",
    "df2 = pd.DataFrame(c)\n",
    "print (df2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  2.22044605e-14   1.38359563e+01   2.19692693e+01]\n",
      "[ 0.          6.41165708  8.2136948 ]\n",
      "[  0.          10.5572809   13.83595631]\n",
      "[  1.11022302e-14   1.05572809e+01   2.29325364e+01]\n",
      "[  0.           6.41165708  14.0312915 ]\n",
      "[  1.11022302e-14   2.47423305e+01   6.63437470e+01]\n",
      "[  0.          34.90554451  34.92086265]\n",
      "[  0.          24.74233053  55.27864045]\n",
      "[ -2.22044605e-14   8.21369480e+00   1.40312915e+01]\n",
      "[  0.          50.76340361  64.78196375]\n",
      "\n",
      "\n",
      "31.6339253801\n"
     ]
    }
   ],
   "source": [
    "#set parameter phi in dimension 0\n",
    "#cosine distance threshold for two users\n",
    "sum = 0\n",
    "for i in range(users):\n",
    "    print (df1.sort_values(by = i)[i].values[0:3])\n",
    "    sum = sum + (df1.sort_values(by = i)[i].values[2])\n",
    "sum = sum/users\n",
    "print (\"\\n\")\n",
    "print (sum)\n",
    "\n",
    "phi = sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  1.11022302e-14   2.91649804e+01   6.14703221e+01]\n",
      "[  0.          26.9795138   61.47032206]\n",
      "[  1.11022302e-14   2.91649804e+01   9.31400566e+01]\n",
      "[  0.          26.9795138   62.62534529]\n",
      "[  0.          62.62534529  75.62173969]\n",
      "\n",
      "\n",
      "70.8655571387\n"
     ]
    }
   ],
   "source": [
    "#set parameter mu in dimension 1 \n",
    "#cosine distance threshold for two items\n",
    "sum =0\n",
    "for i in range(items):\n",
    "    print (df2.sort_values(by = i)[i].values[0:3])\n",
    "    sum = sum + (df2.sort_values(by = i)[i].values[2])\n",
    "sum = sum/items\n",
    "print (\"\\n\")\n",
    "print (sum)\n",
    "\n",
    "mu = sum\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Users most similar to  0 are  [0, 2, 3, 4]\n",
      "     0     1    2     3    4\n",
      "0  0.0   0.0  1.0   7.0  4.0\n",
      "1  0.0   6.0  0.0   7.0  0.0\n",
      "2  0.0   0.0  0.0   9.0  0.0\n",
      "3  3.0   0.0  0.0   6.0  0.0\n",
      "4  0.0   7.0  0.0   8.0  4.0\n",
      "5  8.0   0.0  7.0   0.0  0.0\n",
      "6  0.0   3.0  0.0   0.0  0.0\n",
      "7  4.0   0.0  0.0   0.0  0.0\n",
      "8  6.0  10.0  0.0  10.0  0.0\n",
      "9  0.0   0.0  0.0   0.0  6.0\n",
      "Items closest to item  0 are  [0, 1, 2, 3]\n",
      "Items closest to item  1 are  [0, 1, 3]\n",
      "          0         1    2     3    4\n",
      "0  5.857143   6.55102  1.0   7.0  4.0\n",
      "1  0.000000   6.00000  0.0   7.0  0.0\n",
      "2  0.000000   0.00000  0.0   9.0  0.0\n",
      "3  3.000000   0.00000  0.0   6.0  0.0\n",
      "4  0.000000   7.00000  0.0   8.0  4.0\n",
      "5  8.000000   0.00000  7.0   0.0  0.0\n",
      "6  0.000000   3.00000  0.0   0.0  0.0\n",
      "7  4.000000   0.00000  0.0   0.0  0.0\n",
      "8  6.000000  10.00000  0.0  10.0  0.0\n",
      "9  0.000000   0.00000  0.0   0.0  6.0\n"
     ]
    }
   ],
   "source": [
    "#populate missing ratings \n",
    "l1 = []\n",
    "u = 0\n",
    "for i in range(users):\n",
    "    if df1[i][u] < phi:\n",
    "       l1.append(i)\n",
    "print (\"Users most similar to \",u,\"are \",l1)\n",
    "\n",
    "print (df)\n",
    "df3 = df\n",
    "for i in range(items):\n",
    "    if (df[i][u]==0):\n",
    "        l2 = [] #list of items closest to ith item\n",
    "        for j in range(items):\n",
    "            if df2[j][i] < mu:\n",
    "                l2.append(j)\n",
    "        print (\"Items closest to item \",i, \"are \",l2)\n",
    "        edge_weight = 0\n",
    "        count = 0\n",
    "        for a in l1:\n",
    "            for b in l2:\n",
    "                edge_weight = edge_weight + df[b][a]\n",
    "                if (df[b][a]!=0):\n",
    "                    count = count + 1\n",
    "        edge_weight = edge_weight/count \n",
    "        df3[i][u] = edge_weight\n",
    "print (df3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
